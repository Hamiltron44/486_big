---
title: "Mini-Project 4"
author: Spencer Hamilton
format: 
  html: 
    embed-resources: true
editor: visual
---

## Simulation Study: Understanding the Central Limit Theorem

The central limit theorem is a staple of introductory statistics courses. The objective of this mini project is to see in the code the story typically offered to support the central limit theorem.

Note: For a refresher on the central limit theorem watch <https://www.khanacademy.org/math/ap-statistics/sampling-distribution-ap/sampling-distribution-mean/v/central-limit-theorem> which offers the underlying structure for this work.

### Review of Theory

**Data Distribution:**

Suppose the data is from a population characterized by the probability mass function $p(y) = {\rm P}(Y\ =\ y)$. The probability mass function must satisfy: \begin{eqnarray*}
&& p(y) \geq 0 \mbox{\ for all $y$} \\
&& \\
&& \sum_{y\in {\cal D}} p(y) = 1, \mbox{where ${\cal D} = \{y \mbox{\ such that\ } p(y)>0 \}$}
\end{eqnarray*}

**Sampling Distribution of** $\overline{Y}$

Compute the sample mean $\overline{Y}$ from a SRS of $n$ with replacement from a population characterized by the probability mass function $p(y) = {\rm P}(Y\ =\ y)$.

## Technical Report on Simulation Study

Below are sections of what should be included in the Mini Project Report.

**Introduction**

In this section explain the central limit theorem to someone in an introductory statistics course. Specifically address:

-   taking a sample and computing sample mean
-   repeated sampling
-   characteristics of the resulting sampling distribution

**Reproduce Kahn Academy Example**

Perform the simulation study for the Khan Academy example. The data is from a population with 1 and 6 very likely, 3 and 4 likely, 2 and 5 impossible. The data distribution is

|      |     |     |     |     |     |     |
|:----:|:---:|:---:|:---:|:---:|:---:|:---:|
|  y   |  1  |  2  |  3  |  4  |  5  |  6  |
| p(y) | 0.4 |  0  | 0.1 | 0.1 |  0  | 0.4 |

Code to specify and plot the data distribution:

```{r}
#| eval: true
possible_values <- c(1,2,3,4,5,6)
pmf <- c(.4,0,.1,.1,0,.4)

# plot of data distribution
plot(possible_values, pmf, type = "h", lty = 2, 
     xlab = "y", ylab = "p(y) = P(Y = y)", main = "Data Distribution",
     ylim = c(0, 1))
points(possible_values, pmf, pch = 19)
```

Write a function to generate one possible dataset and compute the sample mean

Psuedo code for function:

```{=html}
<pre>
arguments:
  specify the data distribution (possible_values, pmf)
  sample size (n)

generate a SRS sample with replacement of n
compute the sample mean
return the sample mean
</pre>
```

```{r}
#| eval: true
generator <- function(possible_values, pmf, n){
  # observe data from population
  sample_with_pmf <- sample(possible_values, size = n, replace = TRUE, prob = pmf)
  # compute the mean of the observed data
  return(mean(sample_with_pmf))
}
```

Write code to create a graphic of the sampling distribution of $\overline{Y}$

Pseudo code for simulation study:

```{=html}
<pre>
define possible values, pmf, n
specify the number of simulated sample means (Nsim) 

for 1 to Nsim
  call the R function that generates one possible dataset and computes the sample mean
  add this value to the collection of simulated sample means
  
create a graphic of the sampling distribution
</pre>
```

Note: the Kahn Academy video referred to `Nsim = 10^4`

Note: The function `hist` produces a frequency histogram with it's default arguments. When comparing different distributions it is "more fair" to have the density histogram (`probability = TRUE`) to account for different distributions having different histogram bin widths.

**Sampling Distribution of** $\overline{Y}$ with n = 5

```{r}
#| eval: true
possible_values <- c(1,2,3,4,5,6)
pmf <- c(.4,0,.1,.1,0,.4)
n <- 5

Nsim <- 10^4

SampleDist5 <- numeric(0)
for(i in 1:Nsim){
  this_ybar <- generator(possible_values, pmf, n)
  SampleDist5 <- c(SampleDist5, this_ybar)
}
hist(SampleDist5, probability = TRUE,
     xlim = c(1, 6), ylim = c(0, 1),
     xlab = "Sample Mean", main = "n = 5")
```

**Sampling Distribution of** $\overline{Y}$ with n = 10

```{r}
#| eval: true


possible_values <- c(1,2,3,4,5,6)
pmf <- c(.4,0,.1,.1,0,.4)
n <- 10

Nsim <- 10^4

SampleDist5 <- numeric(0)
for(i in 1:Nsim){
  this_ybar <- generator(possible_values, pmf, n)
  SampleDist5 <- c(SampleDist5, this_ybar)
}
hist(SampleDist5, probability = TRUE,
     xlim = c(1, 6), ylim = c(0, 1),
     xlab = "Sample Mean", main = "n = 10")
```

**Sampling Distribution of** $\overline{Y}$ with n = 30

```{r}
#| eval: true
possible_values <- c(1,2,3,4,5,6)
pmf <- c(.4,0,.1,.1,0,.4)
n <- 30

Nsim <- 10^4

SampleDist5 <- numeric(0)
for(i in 1:Nsim){
  this_ybar <- generator(possible_values, pmf, n)
  SampleDist5 <- c(SampleDist5, this_ybar)
}
hist(SampleDist5, probability = TRUE,
     xlim = c(1, 6), ylim = c(0, 1),
     xlab = "Sample Mean", main = "n = 30")
```

**Beat the Central Limit Theorem**

Choose a data distribution that has a shape you think would defy the central limit theorem. For this exercise, restrict the possible values to ${\cal D} = \{1, 2, 3, 4, 5, 6, 7, 8, 9, 10\}$.

Prompt: Why would this example defy the central limit theorem?

This should defy the central limit theorem because there is only one value. So, technically, this won't be get closer to a normal distribution because it can only ever be one value: there is no variance. Thus, this might be able to defy the central limit theorem because it technically does not have a similar variance to a normal distribution. I'm not sure if this is the answer you were looking for though, as it kinda feels like I cheated. But on the other hand, if we just randomized the pmf, we would really never get anything that would fail the central limit theorem. This really seems like the only real solution to the problem to me, if you really want to beat the central limit theorem.

Note: You are not graded on being able to beat the central limit theorem, just on your logic of why what you tried had a chance.

Code to specify and plot the data distribution:

```{r}
#| eval: true
possible_values <- 1:10
pmf <- c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0)

# plot of data distribution
plot(possible_values, pmf, type = "h", lty = 2, 
     xlab = "y", ylab = "p(y) = P(Y = y)", main = "Data Distribution",
     ylim = c(0, 1))
points(possible_values, pmf, pch = 19)
```

Modify your function above that generates one possible dataset and compute the sample mean to ALSO

-   Check to see if `sum(pmf)` is one (if not, provide an error message)

```{r}
#| eval: true
generator <- function(possible_values, pmf, n) {
  if (abs(sum(pmf) - 1) > .Machine$double.eps^0.5) {
    stop("Error: PMF does not sum to 1. Please provide a valid PMF.")
  }
  
  sample_values <- sample(possible_values, size = n, replace = TRUE, prob = pmf)
  return(mean(sample_values))
}


```

Write code to create a graphic of the sampling distribution of $\overline{Y}$

**Sampling Distribution of** $\overline{Y}$ with n = 5

```{r}
#| eval: true
Nsim <- 10^4
n <- 5

SampleDist5 <- numeric(0)
for(i in 1:Nsim){
  this_ybar <- generator(possible_values, pmf, n)
  SampleDist5 <- c(SampleDist5, this_ybar)
}
hist(SampleDist5, probability = TRUE,
     xlim = c(1, 10), ylim = c(0, 1),
     xlab = "Sample Mean", main = "n = 5")
```

**Sampling Distribution of** $\overline{Y}$ with n = 10

```{r}
#| eval: true
Nsim <- 10^4
n <- 10

SampleDist5 <- numeric(0)
for(i in 1:Nsim){
  this_ybar <- generator(possible_values, pmf, n)
  SampleDist5 <- c(SampleDist5, this_ybar)
}
hist(SampleDist5, probability = TRUE,
     xlim = c(0, 10), ylim = c(0, 1),
     xlab = "Sample Mean", main = "n = 10")

```

**Sampling Distribution of** $\overline{Y}$ with n = 30

```{r}
#| eval: true

Nsim <- 10^4
n <- 30

SampleDist5 <- numeric(0)
for(i in 1:Nsim){
  this_ybar <- generator(possible_values, pmf, n)
  SampleDist5 <- c(SampleDist5, this_ybar)
}
hist(SampleDist5, probability = TRUE,
     xlim = c(1, 10), ylim = c(0, 1),
     xlab = "Sample Mean", main = "n = 30")

```
