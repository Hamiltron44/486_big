#Without water level 6
ggplot(data = germ_final, aes(x = watrlvl, y = response, color = cvrd)) + geom_boxplot()
#look at main effects
ggplot(data = germ_final, aes(x = watrlvl, y = response)) + geom_boxplot()
# Initialize an empty data frame
germ_bern <- data.frame(response = integer(0), watrlvl = factor(), cvrd = factor())
# Loop through each observation in the original dataset
for (i in 1:nrow(germ_full)) {
# Get the number of germinated seeds (1's) and non-germinated seeds (0's)
germinated <- germ_full$response[i]
if (is.na(germinated)) next  # Skip rows with NA response
not_germinated <- 100 - germinated
# Create a vector for this row with 1's and 0's
seed_data <- c(rep(1, germinated), rep(0, not_germinated))
# Create a data frame with the appropriate watrlvl and cvrd factors
temp_df <- data.frame(
response = seed_data,
watrlvl = rep(germ_full$watrlvl[i], 100),
cvrd = rep(germ_full$cvrd[i], 100)
)
# Bind the new data for this row to the main data frame
germ_bern <- rbind(germ_bern, temp_df)
}
# Print the first few rows to check
head(germ_bern)
print(nrow())
# Initialize an empty data frame
germ_bern <- data.frame(response = integer(0), watrlvl = factor(), cvrd = factor())
# Loop through each observation in the original dataset
for (i in 1:nrow(germ_full)) {
# Get the number of germinated seeds (1's) and non-germinated seeds (0's)
germinated <- germ_full$response[i]
if (is.na(germinated)) next  # Skip rows with NA response
not_germinated <- 100 - germinated
# Create a vector for this row with 1's and 0's
seed_data <- c(rep(1, germinated), rep(0, not_germinated))
# Create a data frame with the appropriate watrlvl and cvrd factors
temp_df <- data.frame(
response = seed_data,
watrlvl = rep(germ_full$watrlvl[i], 100),
cvrd = rep(germ_full$cvrd[i], 100)
)
# Bind the new data for this row to the main data frame
germ_bern <- rbind(germ_bern, temp_df)
}
# Print the first few rows to check
head(germ_bern)
print(nrow())
print(nrow(germ_bern))
View(germ_final)
View(germ_bern)
ggplot(germ_bern, aes(x = response, fill = watrlvl)) + geom_dotplot(binaxis = 'x', stackdir = 'up')
ggplot(germ_bern, aes(x = watrlvl, fill = factor(response))) +
geom_bar(position = "fill") +
labs(y = "Proportion", fill = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
ggplot(germ_bern, aes(x = watrlvl, fill = factor(response))) +
geom_bar(position = "fill") +
labs(y = "Proportion", fill = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
ggplot(germ_bern, aes(x = response, fill = watrlvl)) +
geom_histogram(stat = "count", position = "dodge") +
labs(y = "Count", x = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
germ_summary <- germ_bern %>%
group_by(watrlvl) %>%
summarize(proportion_germ = mean(response))
germ_summary <- germ_bern |>
group_by(watrlvl) |>
summarize(proportion_germ = mean(response))
ggplot(germ_bern, aes(x = watrlvl, fill = factor(response))) +
geom_bar(position = "fill") +
facet_wrap(~ cvrd) +
labs(y = "Proportion", fill = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
#bar plot split on cvrd (0 is non covered)
ggplot(germ_bern, aes(x = watrlvl, fill = factor(response))) +
geom_bar(position = "fill") +
facet_wrap(~ cvrd) +
labs(y = "Proportion", fill = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
# Load the dplyr package if it isn't already
library(dplyr)
# Summarize the data by water level
germ_summary <- germ_bern %>%
group_by(watrlvl) %>%
summarise(proportion_germ = mean(response))
# Plot the proportion of germinated seeds per water level
ggplot(germ_summary, aes(x = watrlvl, y = proportion_germ, color = watrlvl)) +
geom_point(size = 3) +
geom_line(aes(group = 1), linetype = "dashed") +
labs(y = "Proportion Germinated", x = "Water Level") +
theme_minimal()
ggplot(germ_bern, aes(x = watrlvl, fill = factor(response))) +
geom_bar(position = "fill") +
labs(y = "Proportion", fill = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
#bar plot split on cvrd (0 is non covered)
ggplot(germ_bern, aes(x = watrlvl, fill = factor(response))) +
geom_bar(position = "fill") +
facet_wrap(~ cvrd) +
labs(y = "Proportion", fill = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
# Load the dplyr package if it isn't already
library(dplyr)
# Summarize the data by water level
germ_summary <- germ_bern %>%
group_by(watrlvl) %>%
summarise(proportion_germ = mean(response))
# Plot the proportion of germinated seeds per water level
ggplot(germ_summary, aes(x = watrlvl, y = proportion_germ, color = watrlvl)) +
geom_point(size = 3) +
geom_line(aes(group = 1), linetype = "dashed") +
labs(y = "Proportion Germinated", x = "Water Level") +
theme_minimal()
# Load the dplyr package if it isn't already
library(dplyr)
# Summarize the data by water level
germ_summary <- germ_bern %>%
group_by(watrlvl) %>%
summarise(proportion_germ = mean(response))
# Plot the proportion of germinated seeds per water level
ggplot(germ_summary, aes(x = watrlvl, y = proportion_germ, color = watrlvl)) +
geom_point(size = 3) +
geom_line() +  # Use solid line
labs(y = "Proportion Germinated", x = "Water Level") +
theme_minimal()
# Load the dplyr package if it isn't already
library(dplyr)
# Summarize the data by water level
germ_summary <- germ_bern %>%
group_by(watrlvl) %>%
summarise(proportion_germ = mean(response))
# Plot the proportion of germinated seeds per water level
ggplot(germ_summary, aes(x = watrlvl, y = proportion_germ, color = watrlvl)) +
geom_point(size = 3) +
labs(y = "Proportion Germinated", x = "Water Level") +
theme_minimal()
library(tidyr)
library(dplyr)
germ_summary <- germ_bern %>%
group_by(watrlvl, cvrd) %>%
summarise(proportion_germ = mean(response)) %>%
spread(key = cvrd, value = proportion_germ)  # Spread coverage into columns
ggplot(germ_summary, aes(x = factor(watrlvl), y = factor(cvrd), fill = proportion_germ)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Water Level", y = "Coverage", fill = "Proportion Germinated") +
theme_minimal()
View(germ_summary)
library(tidyr)
library(dplyr)
germ_summary <- germ_bern |>
group_by(watrlvl, cvrd) |>
summarise(proportion_germ = mean(response)) |>
spread(key = cvrd, value = proportion_germ)  # Spread coverage into columns
ggplot(germ_summary, aes(x = factor(watrlvl), y = factor(cvrd), fill = proportion_germ)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Water Level", y = "Coverage", fill = "Proportion Germinated") +
theme_minimal()
View(germ_summary)
library(dplyr)
library(tidyr)
library(ggplot2)
# Summarize the data by watrlvl and cvrd, and calculate the proportion of germination
germ_summary <- germ_bern |>
group_by(watrlvl, cvrd) |>
summarise(proportion_germ = mean(response), .groups = "drop") |>
spread(key = cvrd, value = proportion_germ)
# Create the heatmap
ggplot(germ_summary, aes(x = factor(watrlvl), y = factor(cvrd), fill = proportion_germ)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Water Level", y = "Coverage", fill = "Proportion Germinated") +
theme_minimal()
View(germ_summary)
library(dplyr)
library(tidyr)
library(ggplot2)
# Summarize the data by watrlvl and cvrd, and calculate the proportion of germination
germ_summary <- germ_bern |>
group_by(watrlvl, cvrd) |>
summarise(proportion_germ = mean(response), .groups = "drop")
# Pivot the data so that each coverage level (0 and 1) is a separate column
germ_summary_wide <- germ_summary |>
pivot_wider(names_from = cvrd, values_from = proportion_germ, values_fill = list(proportion_germ = 0))
# Create the heatmap
ggplot(germ_summary_wide, aes(x = factor(watrlvl), y = factor(cvrd), fill = `1`)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Water Level", y = "Coverage", fill = "Proportion Germinated") +
theme_minimal()
library(dplyr)
library(tidyr)
library(ggplot2)
# Summarize the data by watrlvl and cvrd, and calculate the proportion of germination
germ_summary <- germ_bern |>
group_by(watrlvl, cvrd) |>
summarise(proportion_germ = mean(response), .groups = "drop")
# Pivot the data so that each coverage level (0 and 1) is a separate column
germ_summary_wide <- germ_summary |>
pivot_wider(names_from = cvrd, values_from = proportion_germ, values_fill = list(proportion_germ = 0))
# Create the heatmap
ggplot(germ_summary_wide, aes(x = factor(watrlvl), y = factor(cvrd), fill = `1`)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Water Level", y = "Coverage", fill = "Proportion Germinated") +
theme_minimal()
library(dplyr)
library(tidyr)
library(ggplot2)
# Summarize the data by watrlvl and cvrd, and calculate the proportion of germination
germ_summary <- germ_bern |>
group_by(watrlvl, cvrd) |>
summarise(proportion_germ = mean(response), .groups = "drop")
# Pivot the data so that each coverage level (0 and 1) is a separate column
germ_summary_wide <- germ_summary |>
pivot_wider(names_from = cvrd, values_from = proportion_germ, values_fill = list(proportion_germ = 0))
# Create the heatmap
ggplot(germ_summary_wide, aes(x = factor(watrlvl), y = cvrd, fill = `1`)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Water Level", y = "Coverage", fill = "Proportion Germinated") +
theme_minimal()
library(dplyr)
library(tidyr)
library(ggplot2)
# Summarize the data by watrlvl and cvrd, and calculate the proportion of germination
germ_summary <- germ_bern |>
group_by(watrlvl, cvrd) |>
summarise(proportion_germ = mean(response), .groups = "drop")
# Pivot the data so that each coverage level (0 and 1) is a separate column
germ_summary_wide <- germ_summary |>
pivot_wider(names_from = cvrd, values_from = proportion_germ, values_fill = list(proportion_germ = 0))
# Create the heatmap
ggplot(germ_summary_wide, aes(x = factor(watrlvl), y = factor(cvrd), fill = `1`)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Water Level", y = "Coverage", fill = "Proportion Germinated") +
theme_minimal()
View(germ_summary_wide)
library(dplyr)
library(tidyr)
library(ggplot2)
# Summarize the data by watrlvl and cvrd, and calculate the proportion of germination
germ_summary <- germ_bern |>
group_by(watrlvl, cvrd) |>
summarise(proportion_germ = mean(response), .groups = "drop")
# Pivot the data so that each coverage level (0 and 1) is a separate column
germ_summary_wide <- germ_summary |>
pivot_wider(names_from = cvrd, values_from = proportion_germ, values_fill = list(proportion_germ = 0))
# Create the heatmap
ggplot(germ_summary_wide, aes(x = factor(watrlvl), y = factor(`1`), fill = `1`)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Water Level", y = "Proportion Germinated", fill = "Proportion Germinated") +
theme_minimal()
ggplot(germ_bern, aes(x = response, color = watrlvl)) +
stat_ecdf(geom = "step") +
labs(y = "Cumulative Proportion", x = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
ggplot(germ_bern, aes(x = watrlvl, fill = factor(response))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 1) +
labs(y = "Count", fill = "Germination (1 = Yes, 0 = No)") +
theme_minimal()
ggplot(germ_bern, aes(x = watrlvl, y = response, fill = watrlvl)) +
geom_violin() +
labs(y = "Germination (1 = Yes, 0 = No)", x = "Water Level") +
theme_minimal()
# Fit a logistic regression model with germination as the outcome
dts <- glm(response ~ watrlvl + cvrd, data = germ_bern, family = binomial)
# Perform ANOVA on the logistic regression model
anova(dts, test = "Chisq")
anova(dts)
# Fit a logistic regression model with germination as the outcome
dts <- glm(response ~ watrlvl + cvrd, data = germ_bern, family = binomial)
# Perform ANOVA on the logistic regression model
anova(dts, test = "Chisq")
# Fit a logistic regression model with germination as the outcome
dts_bern <- glm(response ~ watrlvl + cvrd, data = germ_bern, family = binomial)
# Perform ANOVA on the logistic regression model
anova(dts_bern, test = "Chisq")
dts <- lm(response ~ ., data = germ_final)
anova(dts)
dts <- lm(response ~ watrlvl*cvrd, data = germ_final)
anova(dts)
anova(lm(response ~ watrlvl, data = germ_final))
#set up data for interaction plot
pred.dts <- predict(dts)
germ_final_pred <- cbind(germ_final, pred.dts)
germ_interaction <- germ_final_pred[c(1:5, 21:25),]
gg_interaction(x = c("cvrd", "watrlvl"), y = "response", random = NULL, data = germ_interaction)
gg_interaction(x = c("watrlvl", "cvrd"), y = "response", random = NULL, data = germ_interaction)
library(dplyr)
library(ggplot2)
library(pROC)
library(caret)
# Fit the linear regression model (lm)
lm_model <- lm(response ~ watrlvl + cvrd, data = germ_bern)
# Fit the logistic regression model (glm)
logistic_model <- glm(response ~ watrlvl + cvrd, data = germ_bern, family = binomial)
# Predictions for both models
lm_pred <- predict(lm_model, type = "response")  # Linear regression predictions
logistic_pred <- predict(logistic_model, type = "response")  # Logistic regression predictions
# 1. Accuracy
# For linear regression: We'll consider predictions > 0.5 as 1, else 0.
lm_pred_class <- ifelse(lm_pred > 0.5, 1, 0)
logistic_pred_class <- ifelse(logistic_pred > 0.5, 1, 0)
lm_accuracy <- mean(lm_pred_class == germ_bern$response)
logistic_accuracy <- mean(logistic_pred_class == germ_bern$response)
# 2. AUC (Area Under the ROC Curve) - only valid for logistic regression
roc_logistic <- roc(germ_bern$response, logistic_pred)
logistic_auc <- auc(roc_logistic)
# 3. R^2 for Linear Regression
lm_r_squared <- summary(lm_model)$r.squared
# R^2 for Logistic Regression - McFadden's R^2
logistic_r_squared <- 1 - (logistic_model$deviance / logistic_model$null.deviance)
# Output the results
cat("Linear Regression Accuracy:", lm_accuracy, "\n")
cat("Logistic Regression Accuracy:", logistic_accuracy, "\n")
cat("Logistic Regression AUC:", logistic_auc, "\n")
cat("Linear Regression R^2:", lm_r_squared, "\n")
cat("Logistic Regression R^2 (McFadden):", logistic_r_squared, "\n")
dts <- glm(response ~ watrlvl*cvrd, data = germ_bern, family = binomial)
anova(dts)
anova(glm(response ~ watrlvl, data = germ_bern))
library(dplyr)
library(ggplot2)
library(pROC)
library(caret)
# Fit the linear regression model (lm)
lm_model <- lm(response ~ watrlvl + cvrd, data = germ_bern)
# Fit the logistic regression model (glm)
logistic_model <- glm(response ~ watrlvl + cvrd, data = germ_bern, family = binomial)
# Predictions for both models
lm_pred <- predict(lm_model, type = "response")  # Linear regression predictions
logistic_pred <- predict(logistic_model, type = "response")  # Logistic regression predictions
# 1. Accuracy
# For linear regression: We'll consider predictions > 0.5 as 1, else 0.
lm_pred_class <- ifelse(lm_pred > 0.5, 1, 0)
logistic_pred_class <- ifelse(logistic_pred > 0.5, 1, 0)
lm_accuracy <- mean(lm_pred_class == germ_bern$response)
logistic_accuracy <- mean(logistic_pred_class == germ_bern$response)
# 2. AUC (Area Under the ROC Curve) - only valid for logistic regression
roc_logistic <- roc(germ_bern$response, logistic_pred)
logistic_auc <- auc(roc_logistic)
# 3. R^2 for Linear Regression
lm_r_squared <- summary(lm_model)$r.squared
# R^2 for Logistic Regression - McFadden's R^2
logistic_r_squared <- 1 - (logistic_model$deviance / logistic_model$null.deviance)
# Output the results
cat("Linear Regression Accuracy:", lm_accuracy, "\n")
cat("Logistic Regression Accuracy:", logistic_accuracy, "\n")
cat("Logistic Regression AUC:", logistic_auc, "\n")
cat("Linear Regression R^2:", lm_r_squared, "\n")
cat("Logistic Regression R^2 (McFadden):", logistic_r_squared, "\n")
#dts <- lm(response ~ watrlvl*cvrd, data = germ_final)
#anova(dts)
#anova(lm(response ~ watrlvl, data = germ_final))
dts <- glm(response ~ watrlvl*cvrd, data = germ_bern, family = binomial)
anova(dts)
anova(glm(response ~ watrlvl, data = germ_bern))
#set up data for interaction plot
pred.dts <- predict(dts)
germ_final_pred <- cbind(germ_bern, pred.dts)
germ_interaction <- germ_final_pred[c(1:5, 21:25),]
gg_interaction(x = c("cvrd", "watrlvl"), y = "response", random = NULL, data = germ_interaction)
library(ggplot2)
# Fit the logistic regression model (glm)
logistic_model <- glm(response ~ watrlvl * cvrd, data = germ_bern, family = binomial)
# Generate predictions from the model
germ_bern$pred <- predict(logistic_model, type = "response")
# Create interaction plot
ggplot(germ_bern, aes(x = watrlvl, y = pred, color = cvrd, group = cvrd)) +
geom_line() +
geom_point() +
labs(
title = "Interaction Plot: Germination Probability vs Water Level and Coverage",
x = "Water Level",
y = "Predicted Probability of Germination",
color = "Coverage"
) +
theme_minimal()
gg_interaction(x = c("watrlvl", "cvrd"), y = "response", random = NULL, data = germ_bern)
View(germ_full)
# Initialize an empty data frame
germ_bern <- data.frame(response = integer(0), watrlvl = factor(), cvrd = factor())
# Loop through each observation in the original dataset
for (i in 1:nrow(germ_full)) {
# Get the number of germinated seeds (1's) and non-germinated seeds (0's)
germinated <- germ_full$response[i]
if (is.na(germinated)) next  # Skip rows with NA response
not_germinated <- 100 - germinated
# Create a vector for this row with 1's and 0's
seed_data <- c(rep(1, germinated), rep(0, not_germinated))
# Create a data frame with the appropriate watrlvl and cvrd factors
temp_df <- data.frame(
response = seed_data,
watrlvl = rep(germ_full$watrlvl[i], 100),
cvrd = rep(germ_full$cvrd[i], 100)
)
# Bind the new data for this row to the main data frame
germ_bern <- rbind(germ_bern, temp_df)
}
# Print the first few rows to check
head(germ_bern)
print(nrow(germ_bern))
# Initialize an empty data frame
germ_bern <- data.frame(response = integer(0), watrlvl = factor(), cvrd = factor())
# Loop through each observation in the original dataset
for (i in 1:nrow(germ_full)) {
# Get the number of germinated seeds (1's) and non-germinated seeds (0's)
germinated <- germ_full$response[i]
if (is.na(germinated)) next  # Skip rows with NA response
not_germinated <- 100 - germinated
# Create a vector for this row with 1's and 0's
seed_data <- c(rep(1, germinated), rep(0, not_germinated))
# Create a data frame with the appropriate watrlvl and cvrd factors
temp_df <- data.frame(
response = seed_data,
watrlvl = rep(germ_full$watrlvl[i], 100),
cvrd = rep(germ_full$cvrd[i], 100)
)
# Bind the new data for this row to the main data frame
germ_bern <- rbind(germ_bern, temp_df)
}
# Print the first few rows to check
#get rid of last factor:
# Filter out rows where watrlvl is 6
germ_bern <- germ_bern[germ_bern$watrlvl != 6, ]
head(germ_bern)
print(nrow(germ_bern))
# Initialize an empty data frame
germ_bern <- data.frame(response = integer(0), watrlvl = factor(), cvrd = factor())
# Loop through each observation in the original dataset
for (i in 1:nrow(germ_full)) {
# Get the number of germinated seeds (1's) and non-germinated seeds (0's)
germinated <- germ_full$response[i]
if (is.na(germinated)) next  # Skip rows with NA response
not_germinated <- 100 - germinated
# Create a vector for this row with 1's and 0's
seed_data <- c(rep(1, germinated), rep(0, not_germinated))
# Create a data frame with the appropriate watrlvl and cvrd factors
temp_df <- data.frame(
response = seed_data,
watrlvl = rep(germ_full$watrlvl[i], 100),
cvrd = rep(germ_full$cvrd[i], 100)
)
# Bind the new data for this row to the main data frame
germ_bern <- rbind(germ_bern, temp_df)
}
# Print the first few rows to check
#get rid of last factor:
# Filter out rows where watrlvl is 6
germ_bern <- germ_bern[germ_bern$watrlvl != 6, ]
germ_interaction$watrlvl <- droplevels(germ_interaction$watrlvl)
head(germ_bern)
print(nrow(germ_bern))
View(germ_bern)
# Initialize an empty data frame
germ_bern <- data.frame(response = integer(0), watrlvl = factor(), cvrd = factor())
# Loop through each observation in the original dataset
for (i in 1:nrow(germ_full)) {
# Get the number of germinated seeds (1's) and non-germinated seeds (0's)
germinated <- germ_full$response[i]
if (is.na(germinated)) next  # Skip rows with NA response
not_germinated <- 100 - germinated
# Create a vector for this row with 1's and 0's
seed_data <- c(rep(1, germinated), rep(0, not_germinated))
# Create a data frame with the appropriate watrlvl and cvrd factors
temp_df <- data.frame(
response = seed_data,
watrlvl = rep(germ_full$watrlvl[i], 100),
cvrd = rep(germ_full$cvrd[i], 100)
)
# Bind the new data for this row to the main data frame
germ_bern <- rbind(germ_bern, temp_df)
}
# Print the first few rows to check
#get rid of last factor:
# Filter out rows where watrlvl is 6
germ_bern <- germ_bern[germ_bern$watrlvl != 6, ]
germ_bern$watrlvl <- droplevels(germ_interaction$watrlvl)
head(germ_bern)
print(nrow(germ_bern))
# Initialize an empty data frame
germ_bern <- data.frame(response = integer(0), watrlvl = factor(), cvrd = factor())
# Loop through each observation in the original dataset
for (i in 1:nrow(germ_full)) {
# Get the number of germinated seeds (1's) and non-germinated seeds (0's)
germinated <- germ_full$response[i]
if (is.na(germinated)) next  # Skip rows with NA response
not_germinated <- 100 - germinated
# Create a vector for this row with 1's and 0's
seed_data <- c(rep(1, germinated), rep(0, not_germinated))
# Create a data frame with the appropriate watrlvl and cvrd factors
temp_df <- data.frame(
response = seed_data,
watrlvl = rep(germ_full$watrlvl[i], 100),
cvrd = rep(germ_full$cvrd[i], 100)
)
# Bind the new data for this row to the main data frame
germ_bern <- rbind(germ_bern, temp_df)
}
# Print the first few rows to check
#get rid of last factor:
# Filter out rows where watrlvl is 6
germ_bern <- germ_bern[germ_bern$watrlvl != 6, ]
germ_bern$watrlvl <- droplevels(germ_bern$watrlvl)
head(germ_bern)
print(nrow(germ_bern))
